---
name: CI

on:
  push:
    tags: ["release/v*"]
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

jobs:
  tests:
    name: "Tests on Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-latest"
    env:
      USING_COVERAGE: '3.9'

    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9"]

    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: "python -m tox"
      - name: "Combine coverage"
        run: |
          set -xe
          python -m coverage combine
          python -m coverage xml
        if: "contains(env.USING_COVERAGE, matrix.python-version)"
      - name: "Upload coverage to Codecov"
        if: "contains(env.USING_COVERAGE, matrix.python-version)"
        uses: "codecov/codecov-action@v1"
        with:
          fail_ci_if_error: true

  package:
    name: "Build Package Distributions"
    needs: tests
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: [ "3.7", "3.8", "3.9" ]
    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Build distribution"
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          python -m build
      - name: "Check wheel contents"
        run: |
          python -m pip install check-wheel-contents
          check-wheel-contents dist/*.whl
      - name: "Check long description is renderable"
        run: |
          python -m pip install twine
          python -m twine check dist/*
      - name: "Upload artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: package-distributions
          path: dist/*

  publish:
    name: "Publish to PyPI"
    needs: package
    runs-on: "ubuntu-latest"
    steps:
      - name: "Download artifacts"
        uses: actions/download-artifact@v2
        with:
          path: dist
      - name: "Display structure of downloaded files"
        run: ls -R
        working-directory: dist
      - name: "Publish package"
        if: startsWith(github.ref, 'refs/tags/release/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
